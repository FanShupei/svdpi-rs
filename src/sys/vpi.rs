// modified from `bindgen --allowlist-item 'vpi.*' --rust-target 1.85 --rust-edition 2024 --merge-extern-blocks --default-macro-constant-type signed sv_vpi_user.h`
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

/* automatically generated by rust-bindgen 0.71.1 */

pub const vpiAlways: i32 = 1;
pub const vpiAssignStmt: i32 = 2;
pub const vpiAssignment: i32 = 3;
pub const vpiBegin: i32 = 4;
pub const vpiCase: i32 = 5;
pub const vpiCaseItem: i32 = 6;
pub const vpiConstant: i32 = 7;
pub const vpiContAssign: i32 = 8;
pub const vpiDeassign: i32 = 9;
pub const vpiDefParam: i32 = 10;
pub const vpiDelayControl: i32 = 11;
pub const vpiDisable: i32 = 12;
pub const vpiEventControl: i32 = 13;
pub const vpiEventStmt: i32 = 14;
pub const vpiFor: i32 = 15;
pub const vpiForce: i32 = 16;
pub const vpiForever: i32 = 17;
pub const vpiFork: i32 = 18;
pub const vpiFuncCall: i32 = 19;
pub const vpiFunction: i32 = 20;
pub const vpiGate: i32 = 21;
pub const vpiIf: i32 = 22;
pub const vpiIfElse: i32 = 23;
pub const vpiInitial: i32 = 24;
pub const vpiIntegerVar: i32 = 25;
pub const vpiInterModPath: i32 = 26;
pub const vpiIterator: i32 = 27;
pub const vpiIODecl: i32 = 28;
pub const vpiMemory: i32 = 29;
pub const vpiMemoryWord: i32 = 30;
pub const vpiModPath: i32 = 31;
pub const vpiModule: i32 = 32;
pub const vpiNamedBegin: i32 = 33;
pub const vpiNamedEvent: i32 = 34;
pub const vpiNamedFork: i32 = 35;
pub const vpiNet: i32 = 36;
pub const vpiNetBit: i32 = 37;
pub const vpiNullStmt: i32 = 38;
pub const vpiOperation: i32 = 39;
pub const vpiParamAssign: i32 = 40;
pub const vpiParameter: i32 = 41;
pub const vpiPartSelect: i32 = 42;
pub const vpiPathTerm: i32 = 43;
pub const vpiPort: i32 = 44;
pub const vpiPortBit: i32 = 45;
pub const vpiPrimTerm: i32 = 46;
pub const vpiRealVar: i32 = 47;
pub const vpiReg: i32 = 48;
pub const vpiRegBit: i32 = 49;
pub const vpiRelease: i32 = 50;
pub const vpiRepeat: i32 = 51;
pub const vpiRepeatControl: i32 = 52;
pub const vpiSchedEvent: i32 = 53;
pub const vpiSpecParam: i32 = 54;
pub const vpiSwitch: i32 = 55;
pub const vpiSysFuncCall: i32 = 56;
pub const vpiSysTaskCall: i32 = 57;
pub const vpiTableEntry: i32 = 58;
pub const vpiTask: i32 = 59;
pub const vpiTaskCall: i32 = 60;
pub const vpiTchk: i32 = 61;
pub const vpiTchkTerm: i32 = 62;
pub const vpiTimeVar: i32 = 63;
pub const vpiTimeQueue: i32 = 64;
pub const vpiUdp: i32 = 65;
pub const vpiUdpDefn: i32 = 66;
pub const vpiUserSystf: i32 = 67;
pub const vpiVarSelect: i32 = 68;
pub const vpiWait: i32 = 69;
pub const vpiWhile: i32 = 70;
pub const vpiAttribute: i32 = 105;
pub const vpiBitSelect: i32 = 106;
pub const vpiCallback: i32 = 107;
pub const vpiDelayTerm: i32 = 108;
pub const vpiDelayDevice: i32 = 109;
pub const vpiFrame: i32 = 110;
pub const vpiGateArray: i32 = 111;
pub const vpiModuleArray: i32 = 112;
pub const vpiPrimitiveArray: i32 = 113;
pub const vpiNetArray: i32 = 114;
pub const vpiRange: i32 = 115;
pub const vpiRegArray: i32 = 116;
pub const vpiSwitchArray: i32 = 117;
pub const vpiUdpArray: i32 = 118;
pub const vpiContAssignBit: i32 = 128;
pub const vpiNamedEventArray: i32 = 129;
pub const vpiIndexedPartSelect: i32 = 130;
pub const vpiGenScopeArray: i32 = 133;
pub const vpiGenScope: i32 = 134;
pub const vpiGenVar: i32 = 135;
pub const vpiCondition: i32 = 71;
pub const vpiDelay: i32 = 72;
pub const vpiElseStmt: i32 = 73;
pub const vpiForIncStmt: i32 = 74;
pub const vpiForInitStmt: i32 = 75;
pub const vpiHighConn: i32 = 76;
pub const vpiLhs: i32 = 77;
pub const vpiIndex: i32 = 78;
pub const vpiLeftRange: i32 = 79;
pub const vpiLowConn: i32 = 80;
pub const vpiParent: i32 = 81;
pub const vpiRhs: i32 = 82;
pub const vpiRightRange: i32 = 83;
pub const vpiScope: i32 = 84;
pub const vpiSysTfCall: i32 = 85;
pub const vpiTchkDataTerm: i32 = 86;
pub const vpiTchkNotifier: i32 = 87;
pub const vpiTchkRefTerm: i32 = 88;
pub const vpiArgument: i32 = 89;
pub const vpiBit: i32 = 90;
pub const vpiDriver: i32 = 91;
pub const vpiInternalScope: i32 = 92;
pub const vpiLoad: i32 = 93;
pub const vpiModDataPathIn: i32 = 94;
pub const vpiModPathIn: i32 = 95;
pub const vpiModPathOut: i32 = 96;
pub const vpiOperand: i32 = 97;
pub const vpiPortInst: i32 = 98;
pub const vpiProcess: i32 = 99;
pub const vpiVariables: i32 = 100;
pub const vpiUse: i32 = 101;
pub const vpiExpr: i32 = 102;
pub const vpiPrimitive: i32 = 103;
pub const vpiStmt: i32 = 104;
pub const vpiActiveTimeFormat: i32 = 119;
pub const vpiInTerm: i32 = 120;
pub const vpiInstanceArray: i32 = 121;
pub const vpiLocalDriver: i32 = 122;
pub const vpiLocalLoad: i32 = 123;
pub const vpiOutTerm: i32 = 124;
pub const vpiPorts: i32 = 125;
pub const vpiSimNet: i32 = 126;
pub const vpiTaskFunc: i32 = 127;
pub const vpiBaseExpr: i32 = 131;
pub const vpiWidthExpr: i32 = 132;
pub const vpiAutomatics: i32 = 136;
pub const vpiUndefined: i32 = -1;
pub const vpiType: i32 = 1;
pub const vpiName: i32 = 2;
pub const vpiFullName: i32 = 3;
pub const vpiSize: i32 = 4;
pub const vpiFile: i32 = 5;
pub const vpiLineNo: i32 = 6;
pub const vpiTopModule: i32 = 7;
pub const vpiCellInstance: i32 = 8;
pub const vpiDefName: i32 = 9;
pub const vpiProtected: i32 = 10;
pub const vpiTimeUnit: i32 = 11;
pub const vpiTimePrecision: i32 = 12;
pub const vpiDefNetType: i32 = 13;
pub const vpiUnconnDrive: i32 = 14;
pub const vpiHighZ: i32 = 1;
pub const vpiPull1: i32 = 2;
pub const vpiPull0: i32 = 3;
pub const vpiDefFile: i32 = 15;
pub const vpiDefLineNo: i32 = 16;
pub const vpiDefDelayMode: i32 = 47;
pub const vpiDelayModeNone: i32 = 1;
pub const vpiDelayModePath: i32 = 2;
pub const vpiDelayModeDistrib: i32 = 3;
pub const vpiDelayModeUnit: i32 = 4;
pub const vpiDelayModeZero: i32 = 5;
pub const vpiDelayModeMTM: i32 = 6;
pub const vpiDefDecayTime: i32 = 48;
pub const vpiScalar: i32 = 17;
pub const vpiVector: i32 = 18;
pub const vpiExplicitName: i32 = 19;
pub const vpiDirection: i32 = 20;
pub const vpiInput: i32 = 1;
pub const vpiOutput: i32 = 2;
pub const vpiInout: i32 = 3;
pub const vpiMixedIO: i32 = 4;
pub const vpiNoDirection: i32 = 5;
pub const vpiConnByName: i32 = 21;
pub const vpiNetType: i32 = 22;
pub const vpiWire: i32 = 1;
pub const vpiWand: i32 = 2;
pub const vpiWor: i32 = 3;
pub const vpiTri: i32 = 4;
pub const vpiTri0: i32 = 5;
pub const vpiTri1: i32 = 6;
pub const vpiTriReg: i32 = 7;
pub const vpiTriAnd: i32 = 8;
pub const vpiTriOr: i32 = 9;
pub const vpiSupply1: i32 = 10;
pub const vpiSupply0: i32 = 11;
pub const vpiNone: i32 = 12;
pub const vpiUwire: i32 = 13;
pub const vpiNettypeNet: i32 = 14;
pub const vpiNettypeNetSelect: i32 = 15;
pub const vpiInterconnect: i32 = 16;
pub const vpiExplicitScalared: i32 = 23;
pub const vpiExplicitVectored: i32 = 24;
pub const vpiExpanded: i32 = 25;
pub const vpiImplicitDecl: i32 = 26;
pub const vpiChargeStrength: i32 = 27;
pub const vpiArray: i32 = 28;
pub const vpiPortIndex: i32 = 29;
pub const vpiTermIndex: i32 = 30;
pub const vpiStrength0: i32 = 31;
pub const vpiStrength1: i32 = 32;
pub const vpiPrimType: i32 = 33;
pub const vpiAndPrim: i32 = 1;
pub const vpiNandPrim: i32 = 2;
pub const vpiNorPrim: i32 = 3;
pub const vpiOrPrim: i32 = 4;
pub const vpiXorPrim: i32 = 5;
pub const vpiXnorPrim: i32 = 6;
pub const vpiBufPrim: i32 = 7;
pub const vpiNotPrim: i32 = 8;
pub const vpiBufif0Prim: i32 = 9;
pub const vpiBufif1Prim: i32 = 10;
pub const vpiNotif0Prim: i32 = 11;
pub const vpiNotif1Prim: i32 = 12;
pub const vpiNmosPrim: i32 = 13;
pub const vpiPmosPrim: i32 = 14;
pub const vpiCmosPrim: i32 = 15;
pub const vpiRnmosPrim: i32 = 16;
pub const vpiRpmosPrim: i32 = 17;
pub const vpiRcmosPrim: i32 = 18;
pub const vpiRtranPrim: i32 = 19;
pub const vpiRtranif0Prim: i32 = 20;
pub const vpiRtranif1Prim: i32 = 21;
pub const vpiTranPrim: i32 = 22;
pub const vpiTranif0Prim: i32 = 23;
pub const vpiTranif1Prim: i32 = 24;
pub const vpiPullupPrim: i32 = 25;
pub const vpiPulldownPrim: i32 = 26;
pub const vpiSeqPrim: i32 = 27;
pub const vpiCombPrim: i32 = 28;
pub const vpiPolarity: i32 = 34;
pub const vpiDataPolarity: i32 = 35;
pub const vpiPositive: i32 = 1;
pub const vpiNegative: i32 = 2;
pub const vpiUnknown: i32 = 3;
pub const vpiEdge: i32 = 36;
pub const vpiNoEdge: i32 = 0;
pub const vpiEdge01: i32 = 1;
pub const vpiEdge10: i32 = 2;
pub const vpiEdge0x: i32 = 4;
pub const vpiEdgex1: i32 = 8;
pub const vpiEdge1x: i32 = 16;
pub const vpiEdgex0: i32 = 32;
pub const vpiPosedge: i32 = 13;
pub const vpiNegedge: i32 = 50;
pub const vpiAnyEdge: i32 = 63;
pub const vpiPathType: i32 = 37;
pub const vpiPathFull: i32 = 1;
pub const vpiPathParallel: i32 = 2;
pub const vpiTchkType: i32 = 38;
pub const vpiSetup: i32 = 1;
pub const vpiHold: i32 = 2;
pub const vpiPeriod: i32 = 3;
pub const vpiWidth: i32 = 4;
pub const vpiSkew: i32 = 5;
pub const vpiRecovery: i32 = 6;
pub const vpiNoChange: i32 = 7;
pub const vpiSetupHold: i32 = 8;
pub const vpiFullskew: i32 = 9;
pub const vpiRecrem: i32 = 10;
pub const vpiRemoval: i32 = 11;
pub const vpiTimeskew: i32 = 12;
pub const vpiOpType: i32 = 39;
pub const vpiMinusOp: i32 = 1;
pub const vpiPlusOp: i32 = 2;
pub const vpiNotOp: i32 = 3;
pub const vpiBitNegOp: i32 = 4;
pub const vpiUnaryAndOp: i32 = 5;
pub const vpiUnaryNandOp: i32 = 6;
pub const vpiUnaryOrOp: i32 = 7;
pub const vpiUnaryNorOp: i32 = 8;
pub const vpiUnaryXorOp: i32 = 9;
pub const vpiUnaryXNorOp: i32 = 10;
pub const vpiSubOp: i32 = 11;
pub const vpiDivOp: i32 = 12;
pub const vpiModOp: i32 = 13;
pub const vpiEqOp: i32 = 14;
pub const vpiNeqOp: i32 = 15;
pub const vpiCaseEqOp: i32 = 16;
pub const vpiCaseNeqOp: i32 = 17;
pub const vpiGtOp: i32 = 18;
pub const vpiGeOp: i32 = 19;
pub const vpiLtOp: i32 = 20;
pub const vpiLeOp: i32 = 21;
pub const vpiLShiftOp: i32 = 22;
pub const vpiRShiftOp: i32 = 23;
pub const vpiAddOp: i32 = 24;
pub const vpiMultOp: i32 = 25;
pub const vpiLogAndOp: i32 = 26;
pub const vpiLogOrOp: i32 = 27;
pub const vpiBitAndOp: i32 = 28;
pub const vpiBitOrOp: i32 = 29;
pub const vpiBitXorOp: i32 = 30;
pub const vpiBitXNorOp: i32 = 31;
pub const vpiBitXnorOp: i32 = 31;
pub const vpiConditionOp: i32 = 32;
pub const vpiConcatOp: i32 = 33;
pub const vpiMultiConcatOp: i32 = 34;
pub const vpiEventOrOp: i32 = 35;
pub const vpiNullOp: i32 = 36;
pub const vpiListOp: i32 = 37;
pub const vpiMinTypMaxOp: i32 = 38;
pub const vpiPosedgeOp: i32 = 39;
pub const vpiNegedgeOp: i32 = 40;
pub const vpiArithLShiftOp: i32 = 41;
pub const vpiArithRShiftOp: i32 = 42;
pub const vpiPowerOp: i32 = 43;
pub const vpiConstType: i32 = 40;
pub const vpiDecConst: i32 = 1;
pub const vpiRealConst: i32 = 2;
pub const vpiBinaryConst: i32 = 3;
pub const vpiOctConst: i32 = 4;
pub const vpiHexConst: i32 = 5;
pub const vpiStringConst: i32 = 6;
pub const vpiIntConst: i32 = 7;
pub const vpiTimeConst: i32 = 8;
pub const vpiBlocking: i32 = 41;
pub const vpiCaseType: i32 = 42;
pub const vpiCaseExact: i32 = 1;
pub const vpiCaseX: i32 = 2;
pub const vpiCaseZ: i32 = 3;
pub const vpiNetDeclAssign: i32 = 43;
pub const vpiFuncType: i32 = 44;
pub const vpiIntFunc: i32 = 1;
pub const vpiRealFunc: i32 = 2;
pub const vpiTimeFunc: i32 = 3;
pub const vpiSizedFunc: i32 = 4;
pub const vpiSizedSignedFunc: i32 = 5;
pub const vpiSysFuncType: i32 = 44;
pub const vpiSysFuncInt: i32 = 1;
pub const vpiSysFuncReal: i32 = 2;
pub const vpiSysFuncTime: i32 = 3;
pub const vpiSysFuncSized: i32 = 4;
pub const vpiUserDefn: i32 = 45;
pub const vpiScheduled: i32 = 46;
pub const vpiActive: i32 = 49;
pub const vpiAutomatic: i32 = 50;
pub const vpiCell: i32 = 51;
pub const vpiConfig: i32 = 52;
pub const vpiConstantSelect: i32 = 53;
pub const vpiDecompile: i32 = 54;
pub const vpiDefAttribute: i32 = 55;
pub const vpiDelayType: i32 = 56;
pub const vpiModPathDelay: i32 = 1;
pub const vpiInterModPathDelay: i32 = 2;
pub const vpiMIPDelay: i32 = 3;
pub const vpiIteratorType: i32 = 57;
pub const vpiLibrary: i32 = 58;
pub const vpiOffset: i32 = 60;
pub const vpiResolvedNetType: i32 = 61;
pub const vpiSaveRestartID: i32 = 62;
pub const vpiSaveRestartLocation: i32 = 63;
pub const vpiValid: i32 = 64;
pub const vpiValidFalse: i32 = 0;
pub const vpiValidTrue: i32 = 1;
pub const vpiSigned: i32 = 65;
pub const vpiLocalParam: i32 = 70;
pub const vpiModPathHasIfNone: i32 = 71;
pub const vpiIndexedPartSelectType: i32 = 72;
pub const vpiPosIndexed: i32 = 1;
pub const vpiNegIndexed: i32 = 2;
pub const vpiIsMemory: i32 = 73;
pub const vpiIsProtected: i32 = 74;
pub const vpiStop: i32 = 66;
pub const vpiFinish: i32 = 67;
pub const vpiReset: i32 = 68;
pub const vpiSetInteractiveScope: i32 = 69;
pub const vpiScaledRealTime: i32 = 1;
pub const vpiSimTime: i32 = 2;
pub const vpiSuppressTime: i32 = 3;
pub const vpiSupplyDrive: i32 = 128;
pub const vpiStrongDrive: i32 = 64;
pub const vpiPullDrive: i32 = 32;
pub const vpiWeakDrive: i32 = 8;
pub const vpiLargeCharge: i32 = 16;
pub const vpiMediumCharge: i32 = 4;
pub const vpiSmallCharge: i32 = 2;
pub const vpiHiZ: i32 = 1;
pub const vpiBinStrVal: i32 = 1;
pub const vpiOctStrVal: i32 = 2;
pub const vpiDecStrVal: i32 = 3;
pub const vpiHexStrVal: i32 = 4;
pub const vpiScalarVal: i32 = 5;
pub const vpiIntVal: i32 = 6;
pub const vpiRealVal: i32 = 7;
pub const vpiStringVal: i32 = 8;
pub const vpiVectorVal: i32 = 9;
pub const vpiStrengthVal: i32 = 10;
pub const vpiTimeVal: i32 = 11;
pub const vpiObjTypeVal: i32 = 12;
pub const vpiSuppressVal: i32 = 13;
pub const vpiShortIntVal: i32 = 14;
pub const vpiLongIntVal: i32 = 15;
pub const vpiShortRealVal: i32 = 16;
pub const vpiRawTwoStateVal: i32 = 17;
pub const vpiRawFourStateVal: i32 = 18;
pub const vpiNoDelay: i32 = 1;
pub const vpiInertialDelay: i32 = 2;
pub const vpiTransportDelay: i32 = 3;
pub const vpiPureTransportDelay: i32 = 4;
pub const vpiForceFlag: i32 = 5;
pub const vpiReleaseFlag: i32 = 6;
pub const vpiCancelEvent: i32 = 7;
pub const vpiReturnEvent: i32 = 4096;
pub const vpiUserAllocFlag: i32 = 8192;
pub const vpiOneValue: i32 = 16384;
pub const vpiPropagateOff: i32 = 32768;
pub const vpi0: i32 = 0;
pub const vpi1: i32 = 1;
pub const vpiZ: i32 = 2;
pub const vpiX: i32 = 3;
pub const vpiH: i32 = 4;
pub const vpiL: i32 = 5;
pub const vpiDontCare: i32 = 6;
pub const vpiSysTask: i32 = 1;
pub const vpiSysFunc: i32 = 2;
pub const vpiCompile: i32 = 1;
pub const vpiPLI: i32 = 2;
pub const vpiRun: i32 = 3;
pub const vpiNotice: i32 = 1;
pub const vpiWarning: i32 = 2;
pub const vpiError: i32 = 3;
pub const vpiSystem: i32 = 4;
pub const vpiInternal: i32 = 5;
pub const vpiPackage: i32 = 600;
pub const vpiInterface: i32 = 601;
pub const vpiProgram: i32 = 602;
pub const vpiInterfaceArray: i32 = 603;
pub const vpiProgramArray: i32 = 604;
pub const vpiTypespec: i32 = 605;
pub const vpiModport: i32 = 606;
pub const vpiInterfaceTfDecl: i32 = 607;
pub const vpiRefObj: i32 = 608;
pub const vpiTypeParameter: i32 = 609;
pub const vpiVarBit: i32 = 49;
pub const vpiLongIntVar: i32 = 610;
pub const vpiShortIntVar: i32 = 611;
pub const vpiIntVar: i32 = 612;
pub const vpiShortRealVar: i32 = 613;
pub const vpiByteVar: i32 = 614;
pub const vpiClassVar: i32 = 615;
pub const vpiStringVar: i32 = 616;
pub const vpiEnumVar: i32 = 617;
pub const vpiStructVar: i32 = 618;
pub const vpiUnionVar: i32 = 619;
pub const vpiBitVar: i32 = 620;
pub const vpiLogicVar: i32 = 48;
pub const vpiArrayVar: i32 = 116;
pub const vpiClassObj: i32 = 621;
pub const vpiChandleVar: i32 = 622;
pub const vpiPackedArrayVar: i32 = 623;
pub const vpiVirtualInterfaceVar: i32 = 728;
pub const vpiLongIntTypespec: i32 = 625;
pub const vpiShortRealTypespec: i32 = 626;
pub const vpiByteTypespec: i32 = 627;
pub const vpiShortIntTypespec: i32 = 628;
pub const vpiIntTypespec: i32 = 629;
pub const vpiClassTypespec: i32 = 630;
pub const vpiStringTypespec: i32 = 631;
pub const vpiChandleTypespec: i32 = 632;
pub const vpiEnumTypespec: i32 = 633;
pub const vpiEnumConst: i32 = 634;
pub const vpiIntegerTypespec: i32 = 635;
pub const vpiTimeTypespec: i32 = 636;
pub const vpiRealTypespec: i32 = 637;
pub const vpiStructTypespec: i32 = 638;
pub const vpiUnionTypespec: i32 = 639;
pub const vpiBitTypespec: i32 = 640;
pub const vpiLogicTypespec: i32 = 641;
pub const vpiArrayTypespec: i32 = 642;
pub const vpiVoidTypespec: i32 = 643;
pub const vpiTypespecMember: i32 = 644;
pub const vpiPackedArrayTypespec: i32 = 692;
pub const vpiSequenceTypespec: i32 = 696;
pub const vpiPropertyTypespec: i32 = 697;
pub const vpiEventTypespec: i32 = 698;
pub const vpiInterfaceTypespec: i32 = 906;
pub const vpiClockingBlock: i32 = 650;
pub const vpiClockingIODecl: i32 = 651;
pub const vpiClassDefn: i32 = 652;
pub const vpiConstraint: i32 = 653;
pub const vpiConstraintOrdering: i32 = 654;
pub const vpiDistItem: i32 = 645;
pub const vpiAliasStmt: i32 = 646;
pub const vpiThread: i32 = 647;
pub const vpiMethodFuncCall: i32 = 648;
pub const vpiMethodTaskCall: i32 = 649;
pub const vpiAssert: i32 = 686;
pub const vpiAssume: i32 = 687;
pub const vpiCover: i32 = 688;
pub const vpiRestrict: i32 = 901;
pub const vpiDisableCondition: i32 = 689;
pub const vpiClockingEvent: i32 = 690;
pub const vpiPropertyDecl: i32 = 655;
pub const vpiPropertySpec: i32 = 656;
pub const vpiPropertyExpr: i32 = 657;
pub const vpiMulticlockSequenceExpr: i32 = 658;
pub const vpiClockedSeq: i32 = 659;
pub const vpiClockedProp: i32 = 902;
pub const vpiPropertyInst: i32 = 660;
pub const vpiSequenceDecl: i32 = 661;
pub const vpiCaseProperty: i32 = 662;
pub const vpiCasePropertyItem: i32 = 905;
pub const vpiSequenceInst: i32 = 664;
pub const vpiImmediateAssert: i32 = 665;
pub const vpiImmediateAssume: i32 = 694;
pub const vpiImmediateCover: i32 = 695;
pub const vpiReturn: i32 = 666;
pub const vpiAnyPattern: i32 = 667;
pub const vpiTaggedPattern: i32 = 668;
pub const vpiStructPattern: i32 = 669;
pub const vpiDoWhile: i32 = 670;
pub const vpiOrderedWait: i32 = 671;
pub const vpiWaitFork: i32 = 672;
pub const vpiDisableFork: i32 = 673;
pub const vpiExpectStmt: i32 = 674;
pub const vpiForeachStmt: i32 = 675;
pub const vpiReturnStmt: i32 = 691;
pub const vpiFinal: i32 = 676;
pub const vpiExtends: i32 = 677;
pub const vpiDistribution: i32 = 678;
pub const vpiSeqFormalDecl: i32 = 679;
pub const vpiPropFormalDecl: i32 = 699;
pub const vpiArrayNet: i32 = 114;
pub const vpiEnumNet: i32 = 680;
pub const vpiIntegerNet: i32 = 681;
pub const vpiLogicNet: i32 = 36;
pub const vpiTimeNet: i32 = 682;
pub const vpiUnionNet: i32 = 525;
pub const vpiShortRealNet: i32 = 526;
pub const vpiRealNet: i32 = 527;
pub const vpiByteNet: i32 = 528;
pub const vpiShortIntNet: i32 = 529;
pub const vpiIntNet: i32 = 530;
pub const vpiLongIntNet: i32 = 531;
pub const vpiBitNet: i32 = 532;
pub const vpiInterconnectNet: i32 = 533;
pub const vpiInterconnectArray: i32 = 534;
pub const vpiStructNet: i32 = 683;
pub const vpiBreak: i32 = 684;
pub const vpiContinue: i32 = 685;
pub const vpiPackedArrayNet: i32 = 693;
pub const vpiNettypeDecl: i32 = 523;
pub const vpiConstraintExpr: i32 = 747;
pub const vpiElseConst: i32 = 748;
pub const vpiImplication: i32 = 749;
pub const vpiConstrIf: i32 = 738;
pub const vpiConstrIfElse: i32 = 739;
pub const vpiConstrForEach: i32 = 736;
pub const vpiSoftDisable: i32 = 733;
pub const vpiLetDecl: i32 = 903;
pub const vpiLetExpr: i32 = 904;
pub const vpiActual: i32 = 700;
pub const vpiTypedefAlias: i32 = 701;
pub const vpiIndexTypespec: i32 = 702;
pub const vpiBaseTypespec: i32 = 703;
pub const vpiElemTypespec: i32 = 704;
pub const vpiNetTypedefAlias: i32 = 705;
pub const vpiInputSkew: i32 = 706;
pub const vpiOutputSkew: i32 = 707;
pub const vpiGlobalClocking: i32 = 708;
pub const vpiDefaultClocking: i32 = 709;
pub const vpiDefaultDisableIff: i32 = 710;
pub const vpiOrigin: i32 = 713;
pub const vpiPrefix: i32 = 714;
pub const vpiWith: i32 = 715;
pub const vpiProperty: i32 = 718;
pub const vpiValueRange: i32 = 720;
pub const vpiPattern: i32 = 721;
pub const vpiWeight: i32 = 722;
pub const vpiConstraintItem: i32 = 746;
pub const vpiTypedef: i32 = 725;
pub const vpiImport: i32 = 726;
pub const vpiDerivedClasses: i32 = 727;
pub const vpiInterfaceDecl: i32 = 728;
pub const vpiMethods: i32 = 730;
pub const vpiSolveBefore: i32 = 731;
pub const vpiSolveAfter: i32 = 732;
pub const vpiWaitingProcesses: i32 = 734;
pub const vpiMessages: i32 = 735;
pub const vpiLoopVars: i32 = 737;
pub const vpiConcurrentAssertion: i32 = 740;
pub const vpiConcurrentAssertions: i32 = 740;
pub const vpiMatchItem: i32 = 741;
pub const vpiMember: i32 = 742;
pub const vpiElement: i32 = 743;
pub const vpiAssertion: i32 = 744;
pub const vpiInstance: i32 = 745;
pub const vpiTop: i32 = 600;
pub const vpiUnit: i32 = 602;
pub const vpiJoinType: i32 = 603;
pub const vpiJoin: i32 = 0;
pub const vpiJoinNone: i32 = 1;
pub const vpiJoinAny: i32 = 2;
pub const vpiAccessType: i32 = 604;
pub const vpiForkJoinAcc: i32 = 1;
pub const vpiExternAcc: i32 = 2;
pub const vpiDPIExportAcc: i32 = 3;
pub const vpiDPIImportAcc: i32 = 4;
pub const vpiArrayType: i32 = 606;
pub const vpiStaticArray: i32 = 1;
pub const vpiDynamicArray: i32 = 2;
pub const vpiAssocArray: i32 = 3;
pub const vpiQueueArray: i32 = 4;
pub const vpiArrayMember: i32 = 607;
pub const vpiIsRandomized: i32 = 608;
pub const vpiLocalVarDecls: i32 = 609;
pub const vpiOpStrong: i32 = 656;
pub const vpiRandType: i32 = 610;
pub const vpiNotRand: i32 = 1;
pub const vpiRand: i32 = 2;
pub const vpiRandC: i32 = 3;
pub const vpiPortType: i32 = 611;
pub const vpiInterfacePort: i32 = 1;
pub const vpiModportPort: i32 = 2;
pub const vpiConstantVariable: i32 = 612;
pub const vpiStructUnionMember: i32 = 615;
pub const vpiVisibility: i32 = 620;
pub const vpiPublicVis: i32 = 1;
pub const vpiProtectedVis: i32 = 2;
pub const vpiLocalVis: i32 = 3;
pub const vpiOneStepConst: i32 = 9;
pub const vpiUnboundedConst: i32 = 10;
pub const vpiNullConst: i32 = 11;
pub const vpiAlwaysType: i32 = 624;
pub const vpiAlwaysComb: i32 = 2;
pub const vpiAlwaysFF: i32 = 3;
pub const vpiAlwaysLatch: i32 = 4;
pub const vpiDistType: i32 = 625;
pub const vpiEqualDist: i32 = 1;
pub const vpiDivDist: i32 = 2;
pub const vpiPacked: i32 = 630;
pub const vpiTagged: i32 = 632;
pub const vpiRef: i32 = 6;
pub const vpiVirtual: i32 = 635;
pub const vpiHasActual: i32 = 636;
pub const vpiIsConstraintEnabled: i32 = 638;
pub const vpiSoft: i32 = 639;
pub const vpiClassType: i32 = 640;
pub const vpiMailboxClass: i32 = 1;
pub const vpiSemaphoreClass: i32 = 2;
pub const vpiUserDefinedClass: i32 = 3;
pub const vpiProcessClass: i32 = 4;
pub const vpiMethod: i32 = 645;
pub const vpiIsClockInferred: i32 = 649;
pub const vpiIsDeferred: i32 = 657;
pub const vpiIsFinal: i32 = 670;
pub const vpiIsCoverSequence: i32 = 659;
pub const vpiQualifier: i32 = 650;
pub const vpiNoQualifier: i32 = 0;
pub const vpiUniqueQualifier: i32 = 1;
pub const vpiPriorityQualifier: i32 = 2;
pub const vpiTaggedQualifier: i32 = 4;
pub const vpiRandQualifier: i32 = 8;
pub const vpiInsideQualifier: i32 = 16;
pub const vpiInputEdge: i32 = 651;
pub const vpiOutputEdge: i32 = 652;
pub const vpiGeneric: i32 = 653;
pub const vpiCompatibilityMode: i32 = 654;
pub const vpiMode1364v1995: i32 = 1;
pub const vpiMode1364v2001: i32 = 2;
pub const vpiMode1364v2005: i32 = 3;
pub const vpiMode1800v2005: i32 = 4;
pub const vpiMode1800v2009: i32 = 5;
pub const vpiPackedArrayMember: i32 = 655;
pub const vpiStartLine: i32 = 661;
pub const vpiColumn: i32 = 662;
pub const vpiEndLine: i32 = 663;
pub const vpiEndColumn: i32 = 664;
pub const vpiAllocScheme: i32 = 658;
pub const vpiAutomaticScheme: i32 = 1;
pub const vpiDynamicScheme: i32 = 2;
pub const vpiOtherScheme: i32 = 3;
pub const vpiObjId: i32 = 660;
pub const vpiDPIPure: i32 = 665;
pub const vpiDPIContext: i32 = 666;
pub const vpiDPICStr: i32 = 667;
pub const vpiDPI: i32 = 1;
pub const vpiDPIC: i32 = 2;
pub const vpiDPICIdentifier: i32 = 668;
pub const vpiIsModPort: i32 = 669;
pub const vpiImplyOp: i32 = 50;
pub const vpiNonOverlapImplyOp: i32 = 51;
pub const vpiOverlapImplyOp: i32 = 52;
pub const vpiAcceptOnOp: i32 = 83;
pub const vpiRejectOnOp: i32 = 84;
pub const vpiSyncAcceptOnOp: i32 = 85;
pub const vpiSyncRejectOnOp: i32 = 86;
pub const vpiOverlapFollowedByOp: i32 = 87;
pub const vpiNonOverlapFollowedByOp: i32 = 88;
pub const vpiNexttimeOp: i32 = 89;
pub const vpiAlwaysOp: i32 = 90;
pub const vpiEventuallyOp: i32 = 91;
pub const vpiUntilOp: i32 = 92;
pub const vpiUntilWithOp: i32 = 93;
pub const vpiUnaryCycleDelayOp: i32 = 53;
pub const vpiCycleDelayOp: i32 = 54;
pub const vpiIntersectOp: i32 = 55;
pub const vpiFirstMatchOp: i32 = 56;
pub const vpiThroughoutOp: i32 = 57;
pub const vpiWithinOp: i32 = 58;
pub const vpiRepeatOp: i32 = 59;
pub const vpiConsecutiveRepeatOp: i32 = 60;
pub const vpiGotoRepeatOp: i32 = 61;
pub const vpiPostIncOp: i32 = 62;
pub const vpiPreIncOp: i32 = 63;
pub const vpiPostDecOp: i32 = 64;
pub const vpiPreDecOp: i32 = 65;
pub const vpiMatchOp: i32 = 66;
pub const vpiCastOp: i32 = 67;
pub const vpiIffOp: i32 = 68;
pub const vpiWildEqOp: i32 = 69;
pub const vpiWildNeqOp: i32 = 70;
pub const vpiStreamLROp: i32 = 71;
pub const vpiStreamRLOp: i32 = 72;
pub const vpiMatchedOp: i32 = 73;
pub const vpiTriggeredOp: i32 = 74;
pub const vpiAssignmentPatternOp: i32 = 75;
pub const vpiMultiAssignmentPatternOp: i32 = 76;
pub const vpiIfOp: i32 = 77;
pub const vpiIfElseOp: i32 = 78;
pub const vpiCompAndOp: i32 = 79;
pub const vpiCompOrOp: i32 = 80;
pub const vpiImpliesOp: i32 = 94;
pub const vpiInsideOp: i32 = 95;
pub const vpiTypeOp: i32 = 81;
pub const vpiAssignmentOp: i32 = 82;
pub const vpiOtherFunc: i32 = 6;
pub const vpiValidUnknown: i32 = 2;
pub const vpiCoverageStart: i32 = 750;
pub const vpiCoverageStop: i32 = 751;
pub const vpiCoverageReset: i32 = 752;
pub const vpiCoverageCheck: i32 = 753;
pub const vpiCoverageMerge: i32 = 754;
pub const vpiCoverageSave: i32 = 755;
pub const vpiAssertCoverage: i32 = 760;
pub const vpiFsmStateCoverage: i32 = 761;
pub const vpiStatementCoverage: i32 = 762;
pub const vpiToggleCoverage: i32 = 763;
pub const vpiCovered: i32 = 765;
pub const vpiCoverMax: i32 = 766;
pub const vpiCoveredMax: i32 = 766;
pub const vpiCoveredCount: i32 = 767;
pub const vpiAssertAttemptCovered: i32 = 770;
pub const vpiAssertSuccessCovered: i32 = 771;
pub const vpiAssertFailureCovered: i32 = 772;
pub const vpiAssertVacuousSuccessCovered: i32 = 773;
pub const vpiAssertDisableCovered: i32 = 774;
pub const vpiAssertKillCovered: i32 = 777;
pub const vpiFsmStates: i32 = 775;
pub const vpiFsmStateExpression: i32 = 776;
pub const vpiFsm: i32 = 758;
pub const vpiFsmHandle: i32 = 759;
pub const vpiAssertionLock: i32 = 645;
pub const vpiAssertionUnlock: i32 = 646;
pub const vpiAssertionDisable: i32 = 620;
pub const vpiAssertionEnable: i32 = 621;
pub const vpiAssertionReset: i32 = 622;
pub const vpiAssertionKill: i32 = 623;
pub const vpiAssertionEnableStep: i32 = 624;
pub const vpiAssertionDisableStep: i32 = 625;
pub const vpiAssertionClockSteps: i32 = 626;
pub const vpiAssertionSysLock: i32 = 647;
pub const vpiAssertionSysUnlock: i32 = 648;
pub const vpiAssertionSysOn: i32 = 627;
pub const vpiAssertionSysOff: i32 = 628;
pub const vpiAssertionSysKill: i32 = 632;
pub const vpiAssertionSysEnd: i32 = 629;
pub const vpiAssertionSysReset: i32 = 630;
pub const vpiAssertionDisablePassAction: i32 = 633;
pub const vpiAssertionEnablePassAction: i32 = 634;
pub const vpiAssertionDisableFailAction: i32 = 635;
pub const vpiAssertionEnableFailAction: i32 = 636;
pub const vpiAssertionDisableVacuousAction: i32 = 637;
pub const vpiAssertionEnableNonvacuousAction: i32 = 638;
pub const vpiAssertionSysEnablePassAction: i32 = 639;
pub const vpiAssertionSysEnableFailAction: i32 = 640;
pub const vpiAssertionSysDisablePassAction: i32 = 641;
pub const vpiAssertionSysDisableFailAction: i32 = 642;
pub const vpiAssertionSysEnableNonvacuousAction: i32 = 643;
pub const vpiAssertionSysDisableVacuousAction: i32 = 644;
pub type va_list = __builtin_va_list;
pub type PLI_INT64 = i64;
pub type PLI_INT32 = ::std::os::raw::c_int;
pub type PLI_UINT32 = ::std::os::raw::c_uint;
pub type PLI_INT16 = ::std::os::raw::c_short;
pub type PLI_BYTE8 = ::std::os::raw::c_char;
#[doc = " TYPEDEFS"]
pub type vpiHandle = *mut PLI_UINT32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_time {
    pub type_: PLI_INT32,
    pub high: PLI_UINT32,
    pub low: PLI_UINT32,
    pub real: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_vpi_time"][::std::mem::size_of::<t_vpi_time>() - 24usize];
    ["Alignment of t_vpi_time"][::std::mem::align_of::<t_vpi_time>() - 8usize];
    ["Offset of field: t_vpi_time::type_"][::std::mem::offset_of!(t_vpi_time, type_) - 0usize];
    ["Offset of field: t_vpi_time::high"][::std::mem::offset_of!(t_vpi_time, high) - 4usize];
    ["Offset of field: t_vpi_time::low"][::std::mem::offset_of!(t_vpi_time, low) - 8usize];
    ["Offset of field: t_vpi_time::real"][::std::mem::offset_of!(t_vpi_time, real) - 16usize];
};
pub type s_vpi_time = t_vpi_time;
pub type p_vpi_time = *mut t_vpi_time;
#[doc = " delay structures"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_delay {
    pub da: *mut t_vpi_time,
    pub no_of_delays: PLI_INT32,
    pub time_type: PLI_INT32,
    pub mtm_flag: PLI_INT32,
    pub append_flag: PLI_INT32,
    pub pulsere_flag: PLI_INT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_vpi_delay"][::std::mem::size_of::<t_vpi_delay>() - 32usize];
    ["Alignment of t_vpi_delay"][::std::mem::align_of::<t_vpi_delay>() - 8usize];
    ["Offset of field: t_vpi_delay::da"][::std::mem::offset_of!(t_vpi_delay, da) - 0usize];
    ["Offset of field: t_vpi_delay::no_of_delays"]
        [::std::mem::offset_of!(t_vpi_delay, no_of_delays) - 8usize];
    ["Offset of field: t_vpi_delay::time_type"]
        [::std::mem::offset_of!(t_vpi_delay, time_type) - 12usize];
    ["Offset of field: t_vpi_delay::mtm_flag"]
        [::std::mem::offset_of!(t_vpi_delay, mtm_flag) - 16usize];
    ["Offset of field: t_vpi_delay::append_flag"]
        [::std::mem::offset_of!(t_vpi_delay, append_flag) - 20usize];
    ["Offset of field: t_vpi_delay::pulsere_flag"]
        [::std::mem::offset_of!(t_vpi_delay, pulsere_flag) - 24usize];
};
#[doc = " delay structures"]
pub type p_vpi_delay = *mut t_vpi_delay;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_vecval {
    pub aval: PLI_UINT32,
    pub bval: PLI_UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_vpi_vecval"][::std::mem::size_of::<t_vpi_vecval>() - 8usize];
    ["Alignment of t_vpi_vecval"][::std::mem::align_of::<t_vpi_vecval>() - 4usize];
    ["Offset of field: t_vpi_vecval::aval"][::std::mem::offset_of!(t_vpi_vecval, aval) - 0usize];
    ["Offset of field: t_vpi_vecval::bval"][::std::mem::offset_of!(t_vpi_vecval, bval) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_strengthval {
    pub logic: PLI_INT32,
    pub s0: PLI_INT32,
    pub s1: PLI_INT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_vpi_strengthval"][::std::mem::size_of::<t_vpi_strengthval>() - 12usize];
    ["Alignment of t_vpi_strengthval"][::std::mem::align_of::<t_vpi_strengthval>() - 4usize];
    ["Offset of field: t_vpi_strengthval::logic"]
        [::std::mem::offset_of!(t_vpi_strengthval, logic) - 0usize];
    ["Offset of field: t_vpi_strengthval::s0"]
        [::std::mem::offset_of!(t_vpi_strengthval, s0) - 4usize];
    ["Offset of field: t_vpi_strengthval::s1"]
        [::std::mem::offset_of!(t_vpi_strengthval, s1) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_vpi_value {
    pub format: PLI_INT32,
    pub value: t_vpi_value__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union t_vpi_value__bindgen_ty_1 {
    pub str_: *mut PLI_BYTE8,
    pub scalar: PLI_INT32,
    pub integer: PLI_INT32,
    pub real: f64,
    pub time: *mut t_vpi_time,
    pub vector: *mut t_vpi_vecval,
    pub strength: *mut t_vpi_strengthval,
    pub misc: *mut PLI_BYTE8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_vpi_value__bindgen_ty_1"]
        [::std::mem::size_of::<t_vpi_value__bindgen_ty_1>() - 8usize];
    ["Alignment of t_vpi_value__bindgen_ty_1"]
        [::std::mem::align_of::<t_vpi_value__bindgen_ty_1>() - 8usize];
    ["Offset of field: t_vpi_value__bindgen_ty_1::str_"]
        [::std::mem::offset_of!(t_vpi_value__bindgen_ty_1, str_) - 0usize];
    ["Offset of field: t_vpi_value__bindgen_ty_1::scalar"]
        [::std::mem::offset_of!(t_vpi_value__bindgen_ty_1, scalar) - 0usize];
    ["Offset of field: t_vpi_value__bindgen_ty_1::integer"]
        [::std::mem::offset_of!(t_vpi_value__bindgen_ty_1, integer) - 0usize];
    ["Offset of field: t_vpi_value__bindgen_ty_1::real"]
        [::std::mem::offset_of!(t_vpi_value__bindgen_ty_1, real) - 0usize];
    ["Offset of field: t_vpi_value__bindgen_ty_1::time"]
        [::std::mem::offset_of!(t_vpi_value__bindgen_ty_1, time) - 0usize];
    ["Offset of field: t_vpi_value__bindgen_ty_1::vector"]
        [::std::mem::offset_of!(t_vpi_value__bindgen_ty_1, vector) - 0usize];
    ["Offset of field: t_vpi_value__bindgen_ty_1::strength"]
        [::std::mem::offset_of!(t_vpi_value__bindgen_ty_1, strength) - 0usize];
    ["Offset of field: t_vpi_value__bindgen_ty_1::misc"]
        [::std::mem::offset_of!(t_vpi_value__bindgen_ty_1, misc) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_vpi_value"][::std::mem::size_of::<t_vpi_value>() - 16usize];
    ["Alignment of t_vpi_value"][::std::mem::align_of::<t_vpi_value>() - 8usize];
    ["Offset of field: t_vpi_value::format"][::std::mem::offset_of!(t_vpi_value, format) - 0usize];
    ["Offset of field: t_vpi_value::value"][::std::mem::offset_of!(t_vpi_value, value) - 8usize];
};
pub type p_vpi_value = *mut t_vpi_value;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_vpi_arrayvalue {
    pub format: PLI_UINT32,
    pub flags: PLI_UINT32,
    pub value: t_vpi_arrayvalue__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union t_vpi_arrayvalue__bindgen_ty_1 {
    pub integers: *mut PLI_INT32,
    pub shortints: *mut PLI_INT16,
    pub longints: *mut PLI_INT64,
    pub rawvals: *mut PLI_BYTE8,
    pub vectors: *mut t_vpi_vecval,
    pub times: *mut t_vpi_time,
    pub reals: *mut f64,
    pub shortreals: *mut f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_vpi_arrayvalue__bindgen_ty_1"]
        [::std::mem::size_of::<t_vpi_arrayvalue__bindgen_ty_1>() - 8usize];
    ["Alignment of t_vpi_arrayvalue__bindgen_ty_1"]
        [::std::mem::align_of::<t_vpi_arrayvalue__bindgen_ty_1>() - 8usize];
    ["Offset of field: t_vpi_arrayvalue__bindgen_ty_1::integers"]
        [::std::mem::offset_of!(t_vpi_arrayvalue__bindgen_ty_1, integers) - 0usize];
    ["Offset of field: t_vpi_arrayvalue__bindgen_ty_1::shortints"]
        [::std::mem::offset_of!(t_vpi_arrayvalue__bindgen_ty_1, shortints) - 0usize];
    ["Offset of field: t_vpi_arrayvalue__bindgen_ty_1::longints"]
        [::std::mem::offset_of!(t_vpi_arrayvalue__bindgen_ty_1, longints) - 0usize];
    ["Offset of field: t_vpi_arrayvalue__bindgen_ty_1::rawvals"]
        [::std::mem::offset_of!(t_vpi_arrayvalue__bindgen_ty_1, rawvals) - 0usize];
    ["Offset of field: t_vpi_arrayvalue__bindgen_ty_1::vectors"]
        [::std::mem::offset_of!(t_vpi_arrayvalue__bindgen_ty_1, vectors) - 0usize];
    ["Offset of field: t_vpi_arrayvalue__bindgen_ty_1::times"]
        [::std::mem::offset_of!(t_vpi_arrayvalue__bindgen_ty_1, times) - 0usize];
    ["Offset of field: t_vpi_arrayvalue__bindgen_ty_1::reals"]
        [::std::mem::offset_of!(t_vpi_arrayvalue__bindgen_ty_1, reals) - 0usize];
    ["Offset of field: t_vpi_arrayvalue__bindgen_ty_1::shortreals"]
        [::std::mem::offset_of!(t_vpi_arrayvalue__bindgen_ty_1, shortreals) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_vpi_arrayvalue"][::std::mem::size_of::<t_vpi_arrayvalue>() - 16usize];
    ["Alignment of t_vpi_arrayvalue"][::std::mem::align_of::<t_vpi_arrayvalue>() - 8usize];
    ["Offset of field: t_vpi_arrayvalue::format"]
        [::std::mem::offset_of!(t_vpi_arrayvalue, format) - 0usize];
    ["Offset of field: t_vpi_arrayvalue::flags"]
        [::std::mem::offset_of!(t_vpi_arrayvalue, flags) - 4usize];
    ["Offset of field: t_vpi_arrayvalue::value"]
        [::std::mem::offset_of!(t_vpi_arrayvalue, value) - 8usize];
};
pub type p_vpi_arrayvalue = *mut t_vpi_arrayvalue;
#[doc = " system task/function structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_systf_data {
    pub type_: PLI_INT32,
    pub sysfunctype: PLI_INT32,
    pub tfname: *mut PLI_BYTE8,
    pub calltf: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PLI_BYTE8) -> PLI_INT32>,
    pub compiletf: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PLI_BYTE8) -> PLI_INT32>,
    pub sizetf: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PLI_BYTE8) -> PLI_INT32>,
    pub user_data: *mut PLI_BYTE8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_vpi_systf_data"][::std::mem::size_of::<t_vpi_systf_data>() - 48usize];
    ["Alignment of t_vpi_systf_data"][::std::mem::align_of::<t_vpi_systf_data>() - 8usize];
    ["Offset of field: t_vpi_systf_data::type_"]
        [::std::mem::offset_of!(t_vpi_systf_data, type_) - 0usize];
    ["Offset of field: t_vpi_systf_data::sysfunctype"]
        [::std::mem::offset_of!(t_vpi_systf_data, sysfunctype) - 4usize];
    ["Offset of field: t_vpi_systf_data::tfname"]
        [::std::mem::offset_of!(t_vpi_systf_data, tfname) - 8usize];
    ["Offset of field: t_vpi_systf_data::calltf"]
        [::std::mem::offset_of!(t_vpi_systf_data, calltf) - 16usize];
    ["Offset of field: t_vpi_systf_data::compiletf"]
        [::std::mem::offset_of!(t_vpi_systf_data, compiletf) - 24usize];
    ["Offset of field: t_vpi_systf_data::sizetf"]
        [::std::mem::offset_of!(t_vpi_systf_data, sizetf) - 32usize];
    ["Offset of field: t_vpi_systf_data::user_data"]
        [::std::mem::offset_of!(t_vpi_systf_data, user_data) - 40usize];
};
#[doc = " system task/function structure"]
pub type p_vpi_systf_data = *mut t_vpi_systf_data;
#[doc = " SystemVerilog execution information structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_vlog_info {
    pub argc: PLI_INT32,
    pub argv: *mut *mut PLI_BYTE8,
    pub product: *mut PLI_BYTE8,
    pub version: *mut PLI_BYTE8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_vpi_vlog_info"][::std::mem::size_of::<t_vpi_vlog_info>() - 32usize];
    ["Alignment of t_vpi_vlog_info"][::std::mem::align_of::<t_vpi_vlog_info>() - 8usize];
    ["Offset of field: t_vpi_vlog_info::argc"]
        [::std::mem::offset_of!(t_vpi_vlog_info, argc) - 0usize];
    ["Offset of field: t_vpi_vlog_info::argv"]
        [::std::mem::offset_of!(t_vpi_vlog_info, argv) - 8usize];
    ["Offset of field: t_vpi_vlog_info::product"]
        [::std::mem::offset_of!(t_vpi_vlog_info, product) - 16usize];
    ["Offset of field: t_vpi_vlog_info::version"]
        [::std::mem::offset_of!(t_vpi_vlog_info, version) - 24usize];
};
#[doc = " SystemVerilog execution information structure"]
pub type p_vpi_vlog_info = *mut t_vpi_vlog_info;
#[doc = " PLI error information structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_error_info {
    pub state: PLI_INT32,
    pub level: PLI_INT32,
    pub message: *mut PLI_BYTE8,
    pub product: *mut PLI_BYTE8,
    pub code: *mut PLI_BYTE8,
    pub file: *mut PLI_BYTE8,
    pub line: PLI_INT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_vpi_error_info"][::std::mem::size_of::<t_vpi_error_info>() - 48usize];
    ["Alignment of t_vpi_error_info"][::std::mem::align_of::<t_vpi_error_info>() - 8usize];
    ["Offset of field: t_vpi_error_info::state"]
        [::std::mem::offset_of!(t_vpi_error_info, state) - 0usize];
    ["Offset of field: t_vpi_error_info::level"]
        [::std::mem::offset_of!(t_vpi_error_info, level) - 4usize];
    ["Offset of field: t_vpi_error_info::message"]
        [::std::mem::offset_of!(t_vpi_error_info, message) - 8usize];
    ["Offset of field: t_vpi_error_info::product"]
        [::std::mem::offset_of!(t_vpi_error_info, product) - 16usize];
    ["Offset of field: t_vpi_error_info::code"]
        [::std::mem::offset_of!(t_vpi_error_info, code) - 24usize];
    ["Offset of field: t_vpi_error_info::file"]
        [::std::mem::offset_of!(t_vpi_error_info, file) - 32usize];
    ["Offset of field: t_vpi_error_info::line"]
        [::std::mem::offset_of!(t_vpi_error_info, line) - 40usize];
};
#[doc = " PLI error information structure"]
pub type p_vpi_error_info = *mut t_vpi_error_info;
#[doc = " callback structures"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_cb_data {
    pub reason: PLI_INT32,
    pub cb_rtn: ::std::option::Option<unsafe extern "C" fn(arg1: *mut t_cb_data) -> PLI_INT32>,
    pub obj: vpiHandle,
    pub time: p_vpi_time,
    pub value: p_vpi_value,
    pub index: PLI_INT32,
    pub user_data: *mut PLI_BYTE8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_cb_data"][::std::mem::size_of::<t_cb_data>() - 56usize];
    ["Alignment of t_cb_data"][::std::mem::align_of::<t_cb_data>() - 8usize];
    ["Offset of field: t_cb_data::reason"][::std::mem::offset_of!(t_cb_data, reason) - 0usize];
    ["Offset of field: t_cb_data::cb_rtn"][::std::mem::offset_of!(t_cb_data, cb_rtn) - 8usize];
    ["Offset of field: t_cb_data::obj"][::std::mem::offset_of!(t_cb_data, obj) - 16usize];
    ["Offset of field: t_cb_data::time"][::std::mem::offset_of!(t_cb_data, time) - 24usize];
    ["Offset of field: t_cb_data::value"][::std::mem::offset_of!(t_cb_data, value) - 32usize];
    ["Offset of field: t_cb_data::index"][::std::mem::offset_of!(t_cb_data, index) - 40usize];
    ["Offset of field: t_cb_data::user_data"]
        [::std::mem::offset_of!(t_cb_data, user_data) - 48usize];
};
#[doc = " callback structures"]
pub type p_cb_data = *mut t_cb_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_assertion_step_info {
    pub matched_expression_count: PLI_INT32,
    pub matched_exprs: *mut vpiHandle,
    pub stateFrom: PLI_INT32,
    pub stateTo: PLI_INT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_vpi_assertion_step_info"]
        [::std::mem::size_of::<t_vpi_assertion_step_info>() - 24usize];
    ["Alignment of t_vpi_assertion_step_info"]
        [::std::mem::align_of::<t_vpi_assertion_step_info>() - 8usize];
    ["Offset of field: t_vpi_assertion_step_info::matched_expression_count"]
        [::std::mem::offset_of!(t_vpi_assertion_step_info, matched_expression_count) - 0usize];
    ["Offset of field: t_vpi_assertion_step_info::matched_exprs"]
        [::std::mem::offset_of!(t_vpi_assertion_step_info, matched_exprs) - 8usize];
    ["Offset of field: t_vpi_assertion_step_info::stateFrom"]
        [::std::mem::offset_of!(t_vpi_assertion_step_info, stateFrom) - 16usize];
    ["Offset of field: t_vpi_assertion_step_info::stateTo"]
        [::std::mem::offset_of!(t_vpi_assertion_step_info, stateTo) - 20usize];
};
pub type p_vpi_assertion_step_info = *mut t_vpi_assertion_step_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_vpi_attempt_info {
    pub detail: t_vpi_attempt_info__bindgen_ty_1,
    pub attemptStartTime: s_vpi_time,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union t_vpi_attempt_info__bindgen_ty_1 {
    pub failExpr: vpiHandle,
    pub step: p_vpi_assertion_step_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_vpi_attempt_info__bindgen_ty_1"]
        [::std::mem::size_of::<t_vpi_attempt_info__bindgen_ty_1>() - 8usize];
    ["Alignment of t_vpi_attempt_info__bindgen_ty_1"]
        [::std::mem::align_of::<t_vpi_attempt_info__bindgen_ty_1>() - 8usize];
    ["Offset of field: t_vpi_attempt_info__bindgen_ty_1::failExpr"]
        [::std::mem::offset_of!(t_vpi_attempt_info__bindgen_ty_1, failExpr) - 0usize];
    ["Offset of field: t_vpi_attempt_info__bindgen_ty_1::step"]
        [::std::mem::offset_of!(t_vpi_attempt_info__bindgen_ty_1, step) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_vpi_attempt_info"][::std::mem::size_of::<t_vpi_attempt_info>() - 32usize];
    ["Alignment of t_vpi_attempt_info"][::std::mem::align_of::<t_vpi_attempt_info>() - 8usize];
    ["Offset of field: t_vpi_attempt_info::detail"]
        [::std::mem::offset_of!(t_vpi_attempt_info, detail) - 0usize];
    ["Offset of field: t_vpi_attempt_info::attemptStartTime"]
        [::std::mem::offset_of!(t_vpi_attempt_info, attemptStartTime) - 8usize];
};
pub type p_vpi_attempt_info = *mut t_vpi_attempt_info;
pub type vpi_assertion_callback_func = ::std::option::Option<
    unsafe extern "C" fn(
        reason: PLI_INT32,
        cb_time: p_vpi_time,
        assertion: vpiHandle,
        info: p_vpi_attempt_info,
        user_data: *mut PLI_BYTE8,
    ) -> PLI_INT32,
>;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
unsafe extern "C" {
    pub fn vpi_register_cb(cb_data_p: p_cb_data) -> vpiHandle;
    pub fn vpi_remove_cb(cb_obj: vpiHandle) -> PLI_INT32;
    pub fn vpi_get_cb_info(object: vpiHandle, cb_data_p: p_cb_data);
    pub fn vpi_register_systf(systf_data_p: p_vpi_systf_data) -> vpiHandle;
    pub fn vpi_get_systf_info(object: vpiHandle, systf_data_p: p_vpi_systf_data);
    pub fn vpi_handle_by_name(name: *mut PLI_BYTE8, scope: vpiHandle) -> vpiHandle;
    pub fn vpi_handle_by_index(object: vpiHandle, indx: PLI_INT32) -> vpiHandle;
    pub fn vpi_handle(type_: PLI_INT32, refHandle: vpiHandle) -> vpiHandle;
    pub fn vpi_handle_multi(
        type_: PLI_INT32,
        refHandle1: vpiHandle,
        refHandle2: vpiHandle,
        ...
    ) -> vpiHandle;
    pub fn vpi_iterate(type_: PLI_INT32, refHandle: vpiHandle) -> vpiHandle;
    pub fn vpi_scan(iterator: vpiHandle) -> vpiHandle;
    pub fn vpi_get(property: PLI_INT32, object: vpiHandle) -> PLI_INT32;
    pub fn vpi_get64(property: PLI_INT32, object: vpiHandle) -> PLI_INT64;
    pub fn vpi_get_str(property: PLI_INT32, object: vpiHandle) -> *mut PLI_BYTE8;
    pub fn vpi_get_delays(object: vpiHandle, delay_p: p_vpi_delay);
    pub fn vpi_put_delays(object: vpiHandle, delay_p: p_vpi_delay);
    pub fn vpi_get_value(expr: vpiHandle, value_p: p_vpi_value);
    pub fn vpi_put_value(
        object: vpiHandle,
        value_p: p_vpi_value,
        time_p: p_vpi_time,
        flags: PLI_INT32,
    ) -> vpiHandle;
    pub fn vpi_get_value_array(
        object: vpiHandle,
        arrayvalue_p: p_vpi_arrayvalue,
        index_p: *mut PLI_INT32,
        num: PLI_UINT32,
    );
    pub fn vpi_put_value_array(
        object: vpiHandle,
        arrayvalue_p: p_vpi_arrayvalue,
        index_p: *mut PLI_INT32,
        num: PLI_UINT32,
    );
    pub fn vpi_get_time(object: vpiHandle, time_p: p_vpi_time);
    pub fn vpi_mcd_open(fileName: *mut PLI_BYTE8) -> PLI_UINT32;
    pub fn vpi_mcd_close(mcd: PLI_UINT32) -> PLI_UINT32;
    pub fn vpi_mcd_name(cd: PLI_UINT32) -> *mut PLI_BYTE8;
    pub fn vpi_mcd_printf(mcd: PLI_UINT32, format: *mut PLI_BYTE8, ...) -> PLI_INT32;
    pub fn vpi_printf(format: *mut PLI_BYTE8, ...) -> PLI_INT32;
    pub fn vpi_compare_objects(object1: vpiHandle, object2: vpiHandle) -> PLI_INT32;
    pub fn vpi_chk_error(error_info_p: p_vpi_error_info) -> PLI_INT32;
    pub fn vpi_free_object(object: vpiHandle) -> PLI_INT32;
    pub fn vpi_release_handle(object: vpiHandle) -> PLI_INT32;
    pub fn vpi_get_vlog_info(vlog_info_p: p_vpi_vlog_info) -> PLI_INT32;
    pub fn vpi_get_data(id: PLI_INT32, dataLoc: *mut PLI_BYTE8, numOfBytes: PLI_INT32)
        -> PLI_INT32;
    pub fn vpi_put_data(id: PLI_INT32, dataLoc: *mut PLI_BYTE8, numOfBytes: PLI_INT32)
        -> PLI_INT32;
    pub fn vpi_get_userdata(obj: vpiHandle) -> *mut ::std::os::raw::c_void;
    pub fn vpi_put_userdata(obj: vpiHandle, userdata: *mut ::std::os::raw::c_void) -> PLI_INT32;
    pub fn vpi_vprintf(format: *mut PLI_BYTE8, ap: *mut __va_list_tag) -> PLI_INT32;
    pub fn vpi_mcd_vprintf(
        mcd: PLI_UINT32,
        format: *mut PLI_BYTE8,
        ap: *mut __va_list_tag,
    ) -> PLI_INT32;
    pub fn vpi_flush() -> PLI_INT32;
    pub fn vpi_mcd_flush(mcd: PLI_UINT32) -> PLI_INT32;
    pub fn vpi_control(operation: PLI_INT32, ...) -> PLI_INT32;
    pub fn vpi_handle_by_multi_index(
        obj: vpiHandle,
        num_index: PLI_INT32,
        index_array: *mut PLI_INT32,
    ) -> vpiHandle;
    pub fn vpi_register_assertion_cb(
        assertion: vpiHandle,
        reason: PLI_INT32,
        cb_rtn: vpi_assertion_callback_func,
        user_data: *mut PLI_BYTE8,
    ) -> vpiHandle;
}
